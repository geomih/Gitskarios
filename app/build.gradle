buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
        maven { url "https://jitpack.io" }
        maven { url "http://dl.bintray.com/android/android-tools" }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.21.2'
        classpath 'me.tatarka:gradle-retrolambda:3.2.4'
        classpath 'me.tatarka.retrolambda.projectlombok:lombok.ast:0.2.3.a2'
        classpath "net.rdrei.android.buildtimetracker:gradle-plugin:0.5.0"
    }
}

apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: "build-time-tracker"

buildtimetracker {
    reporters {
        csv {
            output "build/times.csv"
            append true
            header false
        }

        summary {
            ordered false
            threshold 50
            barstyle "unicode"
        }

        csvSummary {
            csv "build/times.csv"
        }
    }
}

apply plugin: 'io.fabric'
//gradle dependencyUpdates -Drevision=release

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.2'
    dexOptions {
        javaMaxHeapSize "4g"
    }
    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 23
        versionName "2.8.1"
        versionCode 28100
        resValue "string", "app_git_hash", getCurrentGitHash()

        multiDexEnabled true
    }

    lintOptions {
        abortOnError false
    }

    signingConfigs {
        playStore
    }


    variantFilter { variant ->
        if (
        (variant.buildType.name == "release") && signingConfigs.playStore.storeFile == null) {
            variant.ignore = true
        }
    }
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    productFlavors {
        github {
            applicationId "com.alorma.github"
            ext.betaDistributionGroupAliases = "gitskarios-alpha-testers"
        }
        enterprise {
            applicationId "com.alorma.github_enterprise"
            ext.betaDistributionGroupAliases = "gitskarios-enterprise-alpha-testers"
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            buildConfigField "String", "CLIENT_ID", "\"" + getGHId(false) + "\""
            buildConfigField "String", "CLIENT_SECRET", "\"" + getGHSecret(false) + "\""
            buildConfigField "String", "CLIENT_CALLBACK", "\"" + getGHCallback(false) + "\""
        }
        release {
            minifyEnabled false
            if (signingConfigs.playStore != null) {
                signingConfig signingConfigs.playStore
            }
            buildConfigField "String", "CLIENT_ID", "\"" + getGHId(true) + "\""
            buildConfigField "String", "CLIENT_SECRET", "\"" + getGHSecret(true) + "\""
            buildConfigField "String", "CLIENT_CALLBACK", "\"" + getGHCallback(true) + "\""
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

// delete unaligned files
android.applicationVariants.all { variant ->
    variant.assemble.doLast {
        variant.outputs.each { output ->
            println "aligned " + output.outputFile
            println "unaligned " + output.packageApplication.outputFile

            File unaligned = output.packageApplication.outputFile;
            File aligned = output.outputFile
            if (!unaligned.getName().equalsIgnoreCase(aligned.getName())) {
                println "deleting " + unaligned.getName()
                unaligned.delete()
            }
        }
    }
}

def getCurrentGitHash() {
    return 'git rev-parse --short HEAD'.execute().text.trim()
}

def Properties props = new Properties()
def propFile = file('../gradle.properties')
if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null &&
            props.containsKey('SIGN_FILE') &&
            props.containsKey('SIGN_KEYSTORE_PASS') &&
            props.containsKey('SIGN_KEYSTORE_ALIAS') &&
            props.containsKey('SIGN_KEYSTORE_ALIAS_PASS')) {

        android.signingConfigs.playStore.storeFile = file(props['SIGN_FILE'])
        android.signingConfigs.playStore.storePassword = props['SIGN_KEYSTORE_PASS']
        android.signingConfigs.playStore.keyAlias = props['SIGN_KEYSTORE_ALIAS']
        android.signingConfigs.playStore.keyPassword = props['SIGN_KEYSTORE_ALIAS_PASS']
    } else {
        android.buildTypes.release.signingConfig = null
    }
} else {
    android.buildTypes.release.signingConfig = null
}

def getGHId(pro) {
    if (pro) {
        return hasProperty('GH_PRO_ID') ? GH_PRO_ID : System.getenv('GH_PRO_ID')
    } else {
        return hasProperty('GH_DEV_ID') ? GH_DEV_ID : System.getenv('GH_DEV_ID')
    }
}

def getGHSecret(pro) {
    if (pro) {
        return hasProperty('GH_PRO_SECRET') ? GH_PRO_SECRET : System.getenv('GH_PRO_SECRET')
    } else {
        return hasProperty('GH_DEV_SECRET') ? GH_DEV_SECRET : System.getenv('GH_DEV_SECRET')
    }
}

def getGHCallback(pro) {
    if (pro) {
        return hasProperty('GH_PRO_CALLBACK') ? GH_PRO_CALLBACK : System.getenv('GH_PRO_CALLBACK')
    } else {
        return hasProperty('GH_DEV_CALLBACK') ? GH_DEV_CALLBACK : System.getenv('GH_DEV_CALLBACK')
    }
}

dependencies {
    compile project(':sdks:GithubAndroidSdk')
    // Submodules
    compile('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
        transitive = true;
    }
    compile 'com.jakewharton.rxbinding:rxbinding:0.3.0'
    compile 'com.github.xiprox.errorview:library:2.2.0'

    compile 'com.google.android.gms:play-services:8.4.0'
    compile 'com.google.android.gms:play-services-analytics:8.4.0'

    compile 'com.android.support:design:23.1.1'
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.android.support:palette-v7:23.1.1'
    compile 'com.android.support:recyclerview-v7:23.1.1'
    compile 'com.android.support:cardview-v7:23.1.1'
    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.4'
    compile 'se.emilsjolander:stickylistheaders:2.7.0'
    compile 'com.nineoldandroids:library:2.4.0'
    compile 'org.ocpsoft.prettytime:prettytime:4.0.0.Final'
    compile('com.mikepenz:aboutlibraries:5.2.2@aar') {
        transitive = true
    }
    compile('com.mikepenz:materialdrawer:4.3.7@aar') {
        transitive = true
    }
    compile 'com.mikepenz:actionitembadge:3.1.1@aar'
    compile 'com.mikepenz:octicons-typeface:3.0.1@aar'
    compile 'com.mikepenz:google-material-typeface:1.2.0@aar'
    compile 'com.squareup:otto:1.3.8'
    compile 'com.squareup.dagger:dagger:1.2.2'
    compile 'com.wefika:flowlayout:0.4.0'
    compile 'com.github.alorma:diff-textview:1.1.0'
    compile 'com.github.gabrielemariotti.changeloglib:changelog:2.0.0'
    compile 'com.timehop.stickyheadersrecyclerview:library:0.4.2@aar'
    compile 'com.afollestad:material-cab:0.1.4'
    compile('com.github.afollestad.material-dialogs:core:0.8.5.3@aar') {
        transitive = true
    }
    compile('com.github.afollestad.material-dialogs:commons:0.8.5.3@aar') {
        transitive = true
    }
    compile 'com.github.pedrovgs:renderers:2.0.3'
    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'com.amulyakhare:com.amulyakhare.textdrawable:1.0.1'
    compile 'com.fewlaps.quitnowcache:quitnow-cache:1.4'
    compile 'com.android.support:multidex:1.0.1'
    compile 'io.reactivex:rxandroid:1.0.1'
    compile('com.crashlytics.sdk.android:answers:1.3.6@aar') {
        transitive = true;
    }
    compile 'com.github.Musenkishi:Atelier:1.3.1'
    compile 'com.github.bumptech.glide:glide:3.6.1'
    compile 'jp.wasabeef:glide-transformations:1.3.1'
    compile 'com.github.florent37:glidepalette:1.0.4@aar'

    compile 'cat.ereza:customactivityoncrash:1.4.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.assertj:assertj-core:1.7.0'

    compile 'com.linkedin.android.spyglass:spyglass:1.3.0'
    compile 'com.jakewharton:process-phoenix:1.0.2'
}

apply plugin: 'com.google.gms.google-services'